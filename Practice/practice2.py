# Напишите программу, которая считывает со стандартного ввода целые числа,
# по одному числу в строке, и после первого введенного
# нуля выводит сумму полученных на вход чисел.
# a = 0
# while True:
#     n = int(input("Enter number: "))
#     if n != 0:
#         a += n
#     else:
#         break
# print(a)
# ---------------------------------------------------------------
# Напишите программу, которая считывает целые числа с консоли по одному числу в строке.
#
# Для каждого введённого числа проверить:
# если число меньше 10, то пропускаем это число;
# если число больше 100, то прекращаем считывать числа;
# в остальных случаях вывести это число обратно на консоль в отдельной строке.

# a = 0
# while True:
#     n = int(input("Enter number: "))
#     if n < 10:
#         continue
#     elif n > 100:
#         break
#     else:
#         print(n)
# ---------------------------------------------------------------
# Напишите программу, которая считывает с клавиатуры два числа a и b,
# считает и выводит на консоль среднее арифметическое всех чисел из отрезка [a;b],
# которые кратны числу 3.
#
# В приведенном ниже примере среднее арифметическое считается для чисел на отрезке [−5;12].
# Всего чисел, делящихся на 3, на этом отрезке 6: −3,0,3,6,9,12.
# Их среднее арифметическое равно 4.5.
# На вход программе подаются интервалы,
# внутри которых всегда есть хотя бы одно число, которое делится на 3.

# a = int(input("Enter a: "))
# b = int(input("Enter b: "))
# count = 0
# number = 0
# for a in range(a, b + 1):
#     if a % 3 == 0:
#         number += a
#         count += 1
# print(number / count)

# a = int(input("Enter a: "))
# b = int(input("Enter b: "))
# lst = []
# for a in range(a, b + 1):
#     if a % 3 == 0:
#         lst.append(a)
# print(sum(lst) / len(lst))
# ---------------------------------------------------------------

# GC-состав является важной характеристикой геномных
# последовательностей и определяется как процентное соотношение суммы
# всех гуанинов и цитозинов к общему числу нуклеиновых
# оснований в геномной последовательности.
#
# Напишите программу, которая вычисляет процентное содержание
# символов G (гуанин) и C (цитозин) в введенной строке
# (программа не должна зависеть от регистра вводимых символов).
#
# Например, в строке "acggtgttat" процентное содержание символов G и C равно 4/10⋅100=40.0,
# где 4 - это количество символов G и C,  а 10 - это длина строки.

# word = input("Enter: ")
# countG = 0
# countC = 0
# lst = []
# for i in word:
#     lst.append(i)
#     if i == "g" or i == "G":
#         countG += 1
#     elif i == "c" or i == "C":
#         countC += 1
#
# print(((countG + countC) / len(lst)) * 100)

# info = input()
#
# g = ""
# c = ""
# for item in info:
#     if item == "g" or item == "G":
#         g += item
#     if item == "c" or item == "C":
#         c += item
#
# count_g = len(g)
# count_c = len(c)
#
# final = (((count_g + count_c) / len(info)) * 100)
#
# print(final)


# Узнав, что ДНК не является случайной строкой,
# только что поступившие в Институт биоинформатики студенты группы
# информатиков предложили использовать алгоритм сжатия,
# который сжимает повторяющиеся символы в строке.
#
# Кодирование осуществляется следующим образом:
# s = 'aaaabbсaa' преобразуется в 'a4b2с1a2',
# то есть группы одинаковых символов исходной строки заменяются на этот
# символ и количество его повторений в этой позиции строки.
#
# Напишите программу, которая считывает строку,
# кодирует её предложенным алгоритмом и выводит закодированную
# последовательность на стандартный вывод. Кодирование должно учитывать регистр символов.
#
#
# dnk = input("Enter: ")
# count = 1
# x = 0
# for i in dnk[x:]:
#     # print(dnk[x:], "  dnk[x:]")
#     if len(dnk) == x - 1:
#         print(i, end="")
#         print(count, end="")
#     j = dnk[x+1:]
#     for j in dnk[x+1:]:
#         if i == j:
#             count += 1
#         else:
#             print(i, end="")
#             print(count, end="")
#             break
#     x += count
#     count = 1



dnk = input("Enter: ")
counter = 1
x = 1
j = dnk[x:x+1]
# print(j)
for i in dnk:
    if i in j:
        counter += 1
    else:
        print(i, end="")
        print(counter, end="")
        counter = 1
    x += 1
    # print(j)
    j = dnk[x:x+1]
    print(j)







